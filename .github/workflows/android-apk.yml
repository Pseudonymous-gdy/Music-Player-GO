name: Android CI

on:
  push:
    branches: [ "master", "dguo" ]   # 常规 CI：构建 Debug
    tags:     [ "v*" ]               # 打 tag：构建 Release 并发布
  pull_request:
  workflow_dispatch:
    inputs:
      release_version:
        description: "手动发布版本号（如 v0.0.1；留空仅构建 Debug 不发布）"
        required: false
        default: ""

permissions:
  contents: write                    # 需要写权限发布 GitHub Release

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      ANDROID_DIR: project           # Android 工程目录（含 gradlew）
      APP_MODULE: app                # 主模块名
      ANDROID_API: "33"              # 与 app 的 compileSdkVersion 对齐
      BUILD_TOOLS: "33.0.2"          # 与 ANDROID_API 对应版本

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Set up Android SDK (cmdline-tools)
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true

      - name: Setup Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Make Gradle wrapper executable
        working-directory: ${{ env.ANDROID_DIR }}
        run: chmod +x ./gradlew

      # 安装所需 SDK 包（容错，不因 sdkmanager 偶发返回码而失败）
      - name: Ensure SDK packages (platforms/build-tools)
        run: |
          set +e
          SDKMANAGER=$(which sdkmanager || echo "/usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager")
          echo "Using sdkmanager: ${SDKMANAGER}"
          yes | "${SDKMANAGER}" --licenses
          yes | "${SDKMANAGER}" --install \
            "platforms;android-${{ env.ANDROID_API }}" \
            "build-tools;${{ env.BUILD_TOOLS }}" \
            "platform-tools"
          set -e

      - name: Show Gradle info
        working-directory: ${{ env.ANDROID_DIR }}
        run: ./gradlew -v

      # ---------- 准备签名（仅发布场景）----------
      - name: Prepare release keystore from secrets
        if: ${{ startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '') }}
        shell: bash
        env:
          ANDROID_SIGNING_KEYSTORE_BASE64: ${{ secrets.ANDROID_SIGNING_KEYSTORE_BASE64 }}
          ANDROID_SIGNING_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEYSTORE_PASSWORD }}
          ANDROID_SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_SIGNING_KEY_ALIAS }}
          ANDROID_SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${ANDROID_SIGNING_KEYSTORE_BASE64:-}" ] || \
             [ -z "${ANDROID_SIGNING_KEYSTORE_PASSWORD:-}" ] || \
             [ -z "${ANDROID_SIGNING_KEY_ALIAS:-}" ] || \
             [ -z "${ANDROID_SIGNING_KEY_PASSWORD:-}" ]; then
            echo "Signing secrets are missing; release artifacts will be UNSIGNED."
            exit 0
          fi

          KEYSTORE_PATH="$RUNNER_TEMP/release.keystore"
          echo "$ANDROID_SIGNING_KEYSTORE_BASE64" | base64 -d > "$KEYSTORE_PATH"
          # Export env vars for Gradle
          echo "SIGNING_KEYSTORE_PATH=$KEYSTORE_PATH" >> "$GITHUB_ENV"
          echo "SIGNING_KEYSTORE_PASSWORD=$ANDROID_SIGNING_KEYSTORE_PASSWORD" >> "$GITHUB_ENV"
          echo "SIGNING_KEY_ALIAS=$ANDROID_SIGNING_KEY_ALIAS" >> "$GITHUB_ENV"
          echo "SIGNING_KEY_PASSWORD=$ANDROID_SIGNING_KEY_PASSWORD" >> "$GITHUB_ENV"

      # ---------- Debug（非发布场景）----------
      - name: Build Debug APK
        if: ${{ !startsWith(github.ref, 'refs/tags/') && (github.event_name != 'workflow_dispatch' || github.event.inputs.release_version == '') }}
        working-directory: ${{ env.ANDROID_DIR }}
        run: ./gradlew --no-daemon :${{ env.APP_MODULE }}:assembleDebug

      - name: Upload Debug artifact
        if: ${{ !startsWith(github.ref, 'refs/tags/') && (github.event_name != 'workflow_dispatch' || github.event.inputs.release_version == '') }}
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk-${{ github.run_number }}
          path: ${{ env.ANDROID_DIR }}/${{ env.APP_MODULE }}/build/outputs/apk/debug/*.apk
          if-no-files-found: error

      # ---------- Release（打 tag 或手动输入版本号）----------
      - name: Build Release (APK/AAB + mapping)
        if: ${{ startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '') }}
        working-directory: ${{ env.ANDROID_DIR }}
        run: ./gradlew --no-daemon :${{ env.APP_MODULE }}:assembleRelease :${{ env.APP_MODULE }}:bundleRelease

      # 若未配置正式签名（Secrets 不存在），使用临时 keystore 对 Release APK 进行签名以便安装
      - name: Temporary sign Release APKs when no secrets
        if: ${{ startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '') }}
        shell: bash
        env:
          BUILD_TOOLS: ${{ env.BUILD_TOOLS }}
          ANDROID_DIR: ${{ env.ANDROID_DIR }}
          APP_MODULE: ${{ env.APP_MODULE }}
        run: |
          set -euo pipefail
          # 如果已经配置了正式签名环境变量，则跳过临时签名
          if [[ -n "${SIGNING_KEYSTORE_PATH:-}" && -n "${SIGNING_KEYSTORE_PASSWORD:-}" && -n "${SIGNING_KEY_ALIAS:-}" && -n "${SIGNING_KEY_PASSWORD:-}" ]]; then
            echo "Signing secrets detected; skip temporary signing."
            exit 0
          fi

          echo "No signing secrets; performing temporary signing for installable APKs."
          # 解析 apksigner 路径
          APKSIGNER=$(command -v apksigner || true)
          if [[ -z "$APKSIGNER" ]]; then
            if [[ -n "${ANDROID_SDK_ROOT:-}" && -x "$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS/apksigner" ]]; then
              APKSIGNER="$ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS/apksigner"
            elif [[ -x "/usr/local/lib/android/sdk/build-tools/$BUILD_TOOLS/apksigner" ]]; then
              APKSIGNER="/usr/local/lib/android/sdk/build-tools/$BUILD_TOOLS/apksigner"
            else
              echo "apksigner not found" >&2
              exit 1
            fi
          fi

          # 生成临时 keystore
          KS="$RUNNER_TEMP/temp-release.keystore"
          ALIAS="temp"
          if command -v openssl >/dev/null 2>&1; then
            STOREPASS=$(openssl rand -hex 16)
            KEYPASS=$(openssl rand -hex 16)
          else
            STOREPASS=$(head -c 16 /dev/urandom | xxd -p || echo tempStorePass123)
            KEYPASS=$(head -c 16 /dev/urandom | xxd -p || echo tempKeyPass123)
          fi
          keytool -genkeypair -v \
            -keystore "$KS" -storepass "$STOREPASS" -keypass "$KEYPASS" \
            -alias "$ALIAS" -keyalg RSA -keysize 2048 -validity 3650 \
            -dname "CN=Temporary,O=CI,OU=CI,L=,S=,C=US"

          APK_DIR="$ANDROID_DIR/$APP_MODULE/build/outputs/apk/release"
          shopt -s nullglob
          APKS=("$APK_DIR"/*.apk)
          if [[ ${#APKS[@]} -eq 0 ]]; then
            echo "No release APKs found to sign in $APK_DIR" >&2
            exit 1
          fi
          for APK in "${APKS[@]}"; do
            echo "Signing $APK with temporary keystore..."
            "$APKSIGNER" sign \
              --ks "$KS" \
              --ks-key-alias "$ALIAS" \
              --ks-pass pass:"$STOREPASS" \
              --key-pass pass:"$KEYPASS" \
              "$APK"
            echo "Verifying signature for $APK"
            "$APKSIGNER" verify -v "$APK"
          done

      # 打 tag 发布：使用当前 tag
      - name: Create/Update GitHub Release (tag push)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            ${{ env.ANDROID_DIR }}/${{ env.APP_MODULE }}/build/outputs/apk/release/*.apk
            ${{ env.ANDROID_DIR }}/${{ env.APP_MODULE }}/build/outputs/bundle/release/*.aab
            ${{ env.ANDROID_DIR }}/${{ env.APP_MODULE }}/build/outputs/mapping/release/mapping.txt

      # 手动发布：用输入版本号创建/更新 Release（无需预先打 tag）
      - name: Create/Update GitHub Release (manual)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_version != '' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_version }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          files: |
            ${{ env.ANDROID_DIR }}/${{ env.APP_MODULE }}/build/outputs/apk/release/*.apk
            ${{ env.ANDROID_DIR }}/${{ env.APP_MODULE }}/build/outputs/bundle/release/*.aab
            ${{ env.ANDROID_DIR }}/${{ env.APP_MODULE }}/build/outputs/mapping/release/mapping.txt
